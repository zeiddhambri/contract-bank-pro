
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import ContractTypeSelect from "./ContractTypeSelect";
import { contractFormSchema, ContractFormData } from "@/lib/contractFormSchema";
import GuaranteesFormSection from "./GuaranteesFormSection";

interface CreateContractDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onContractCreated: () => void;
}

const CreateContractDialog = ({ open, onOpenChange, onContractCreated }: CreateContractDialogProps) => {
  const { toast } = useToast();
  const form = useForm<ContractFormData>({
    resolver: zodResolver(contractFormSchema),
    defaultValues: {
      client: "",
      type: "",
      montant: 0,
      currency: "EUR",
      garanties: [{ type: "", hypotheque_type: "", details: "" }],
      agence: "",
      description: "",
    },
  });

  const onSubmit = async (data: ContractFormData) => {
    console.log("Submitting contract data:", data);
    
    try {
      const cleanedGaranties = data.garanties.map(g => {
        const newG: {type: string; hypotheque_type?: string; details?: string} = { type: g.type };
        if (g.type === 'hypotheque') {
            newG.hypotheque_type = g.hypotheque_type;
            newG.details = g.details;
        }
        return newG;
      });

      const contractData = {
        client: data.client,
        type: data.type,
        montant: data.montant,
        currency: data.currency,
        garantie: data.garanties[0]?.type || "aucune",
        garanties: cleanedGaranties,
        agence: data.agence,
        description: data.description || "",
        reference_decision: "", // This will be auto-generated by the trigger
      };

      console.log("Contract data to insert:", contractData);

      const { data: insertedData, error } = await supabase
        .from("contracts")
        .insert(contractData as any) // Using 'as any' because 'currency' might not be in generated types yet
        .select();

      if (error) {
        console.error("Supabase error:", error);
        throw error;
      }

      console.log("Contract created successfully:", insertedData);

      toast({
        title: "Contrat créé",
        description: "Le nouveau contrat a été créé avec succès.",
      });

      form.reset();
      onOpenChange(false);
      onContractCreated();
    } catch (error) {
      console.error("Error creating contract:", error);
      toast({
        title: "Erreur",
        description: "Une erreur s'est produite lors de la création du contrat.",
        variant: "destructive",
      });
    }
  };

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="sm:max-w-lg w-full overflow-y-auto">
        <SheetHeader>
          <SheetTitle>Nouveau Contrat</SheetTitle>
          <SheetDescription>
            Créez un nouveau contrat de financement bancaire.
          </SheetDescription>
        </SheetHeader>
        <div className="py-4">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="client"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Client</FormLabel>
                    <FormControl>
                      <Input placeholder="Nom du client" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* Use the extracted ContractTypeSelect component */}
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Type de Contrat</FormLabel>
                    <FormControl>
                      <ContractTypeSelect value={field.value} onChange={field.onChange} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="montant"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Montant</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          placeholder="0"
                          {...field}
                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="currency"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Devise</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Devise" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="EUR">Euro (€)</SelectItem>
                          <SelectItem value="USD">Dollar ($)</SelectItem>
                          <SelectItem value="TND">Dinar Tunisien (TND)</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <GuaranteesFormSection form={form} />

              <FormField
                control={form.control}
                name="agence"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Agence</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Sélectionnez l'agence" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="max-h-60 overflow-y-auto">
                        <SelectItem value="agence_centrale_cun">Agence Centrale CUN</SelectItem>
                        <SelectItem value="la_marsa">La Marsa</SelectItem>
                        <SelectItem value="aouina">Aouina</SelectItem>
                        <SelectItem value="berges_du_lac_2">Les Berges du Lac 2</SelectItem>
                        <SelectItem value="petite_ariana">Petite Ariana</SelectItem>
                        <SelectItem value="ben_arous">Ben Arous</SelectItem>
                        <SelectItem value="denden">Denden</SelectItem>
                        <SelectItem value="ennasr">Ennasr</SelectItem>
                        <SelectItem value="kheireddine_pacha">Kheireddine Pacha</SelectItem>
                        <SelectItem value="bizerte">Bizerte</SelectItem>
                        <SelectItem value="nabeul">Nabeul</SelectItem>
                        <SelectItem value="nabeul_mrezga">Nabeul Mrezga</SelectItem>
                        <SelectItem value="sousse">Sousse</SelectItem>
                        <SelectItem value="monastir">Monastir</SelectItem>
                        <SelectItem value="sfax_bostene">Sfax Bostène</SelectItem>
                        <SelectItem value="sfax_gremda">Sfax Gremda</SelectItem>
                        <SelectItem value="sfax_route_gabes">Sfax Route de Gabès</SelectItem>
                        <SelectItem value="gabes">Gabès</SelectItem>
                        <SelectItem value="medenine">Médenine</SelectItem>
                        <SelectItem value="djerba">Djerba</SelectItem>
                        <SelectItem value="ras_jdir">Ras Jdir</SelectItem>
                        <SelectItem value="megrine">Mégrine</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description (optionnel)</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Détails supplémentaires..."
                        className="resize-none"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <SheetFooter>
                <Button type="submit" disabled={form.formState.isSubmitting}>
                  {form.formState.isSubmitting ? "Création en cours..." : "Créer le Contrat"}
                </Button>
              </SheetFooter>
            </form>
          </Form>
        </div>
      </SheetContent>
    </Sheet>
  );
};

export default CreateContractDialog;
